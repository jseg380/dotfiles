#!/bin/bash
#
# Author: jseg380
# File: ~/.local/bin/set-monitor
#

#··············································································
# Variables {{{

default=1
upArray=("up" "u" "north" "n" "above")        # 0
rightArray=("right" "r" "east" "e")           # 1
downArray=("down" "d" "south" "s" "below")    # 2
leftArray=("left" "l" "west" "w")             # 3
arraysNames=("upArray" "rightArray" "downArray" "leftArray")
directionArray=("--above" "--right-of" "--below" "--left-of")

monitors=()
connectedMonitors=()
mainMonitor=""
numMonitors=$(xrandr | grep 'connected' | wc -l)

programName="$(basename $0)"

errorCode=10

# }}}


#··············································································
# Functions {{{

function info_program() {
defaultDirection="$(local a=${arraysNames[$default]}; echo ${!a[0]})"
cat << EOF
Usage: $programName [OPTION] [POSITION]

Set secondary monitor position relative to the primary monitor.

Options:
  -h, --help    display this help and exit
  -m, --mirror  mirror the output of primary monitor

Positions (case insensitive):
  ${upArray[*]^}
  ${rightArray[*]^}
  ${downArray[*]^}
  ${leftArray[*]^}

If no position is passed '${defaultDirection}' is used.
If the option mirror is passed then no position must be passed.
EOF
}

function get_monitors() {
    # Create temporal file to store output of commands
    tmpFile=$(mktemp)

    xrandr | grep 'connected' | awk '{print $1}' > $tmpFile
    while IFS= read -r line
    do
        monitors+=("$line")
    done < $tmpFile

    xrandr | grep -P ' connected' | awk '{print $1}' > $tmpFile
    while IFS= read -r line
    do
        connectedMonitors+=("$line")
    done < $tmpFile

    # Delete the temporal file
    rm $tmpFile

    # Assign mainMonitor
    # By default the monitor targeted as primary
    mainMonitor="$(xrandr | grep 'primary' | awk '{print $1}')"
    # Otherwise the one considered first by xrandr
    [ "$mainMonitor" = "" ] && mainMonitor="${connectedMonitors[0]}"
}

function get_direction() {
    local option="${1,,}"   # Convert to lowercase

    for i in "${!arraysNames[@]}"
    do
        currentArray="${arraysNames[i]}[@]"
        for element in "${!currentArray}"
        do
            [ "$option" = "${element,,}" ] && echo -n "$i" && return 0
        done
    done
    
    echo -n "$errorCode"
}

function manage_monitors() {
    get_monitors
    
    local params=""

    for i in "${connectedMonitors[@]}"
    do
        [ "$i" = "$mainMonitor" ] && continue

        if [ "$1" = "set" ]
        then
            params+=$(printf -- "--output %s --auto %s %s " \
                                "$i" "${directionArray[$2]}" "$mainMonitor")
        elif [ "$1" = "mirror" ]
        then
            params+=$(printf -- "--output %s --auto --same-as %s " \
                                "$i" "$mainMonitor")
        fi
    done
    
    xrandr $params && return 0

    echo "An error occurred executing 'xrandr $params'"
    exit 1
}

# }}}


#··············································································
# Main {{{

# Default behaviour
if [ $# -eq 0 ]
then
    manage_monitors "set" $default
    exit 0
fi

# TODO: Support for adjusting multiple monitors
# Impediments: Extremely likely that the user won't know the order in which 
# the video ports are wired, so it may be unintuitive at first
# if [ $# -gt $numMonitors ]
if [ $# -ne 1 ]
then
    echo "$programName: too many arguments"
    echo "Try '$programName --help' for more information."
    exit 1
fi

# If the program has reached this point, then there is exactly one argument
case "$1" in
    "-h" | "--help")
        info_program
        exit 0
        ;;
    "-m" | "--mirror")
        manage_monitors "mirror"
        exit 0
        ;;
    "-"*)
        echo "$programName: unrecognized option '$1'"
        echo "Try '$programName --help' for more information."
        exit 1
        ;;
esac

direction=$(get_direction "$1")

if [ $direction -eq $errorCode ]
then
    echo "$programName: unrecognized direction '$1'"
    echo "Try '$programName --help' for more information."
    exit 1
fi

manage_monitors "set" $direction

# }}}
