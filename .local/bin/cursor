#!/bin/bash
#
# Author: jseg380
# File: ~/.local/bin/cursor
#

#··············································································
# Variables {{{

programName="$(basename $0)"

xdgConfig="${XDG_CONFIG_HOME:-$HOME/.config}"
xdgData="${XDG_DATA_HOME:-$HOME/.local/share}"

# Cursor themes located at local icons won't apply to system wide configuration
# For example, for the window manager in the case of Qtile
localIcons="${xdgData}/icons"
globalIcons="/usr/share/icons"

defaultTheme="$(sed -n -E '/^Inherits=(.*)$/s//\1/p' \
                 ${globalIcons}/default/index.theme)"

themeFiles=( "${xdgConfig}/X11/Xresources" "$HOME/.Xresources" )

themes=()

# }}}


#··············································································
# Functions {{{

function info_program() {
cat << EOF
Usage: $programName [OPTION] [THEME]

Set cursor theme.

Options:
  -h, --help           display this help and exit
  -l, --list-themes    list installed cursor themes
  -s, --set-theme      set cursor to specified theme

If no option is passed the current cursor theme will be shown
EOF
}

function show_current() {
    local currentTheme="$(sed -n -E \
        '/Xcursor\.theme:\s*(.*)$/s//\1/p' <(xrdb -query))"

    echo "Current theme: ${currentTheme:-$defaultTheme}"
}

function get_themes() {
    while IFS= read -r line
    do
        themes+=("$line")
    done < <(find $globalIcons $localIcons -type d -name "cursors" | 
             awk -F '/' '{print $(NF-1)}')
    unset IFS
}

function check_arg() {
    get_themes
    for theme in "${themes[@]}"
    do
        [ "$theme" = "$1" ] && return 0
    done
    return 1
}

function set_theme() {
    local newTheme="$1"
    local xresParam="Xcursor.theme"
    local themeIndex=0
    local themeFile="${themeFiles[$themeIndex]}"

    if ! [ -f "$themeFile" ]
    then
        echo -n -e \
            "No Xresources file was found." "\n" \
            "\bSelect where to create it:" "\n" \
            "\b  1 $HOME/.config/X11/Xresources" "\n" \
            "\b  2 $HOME/.Xresources" "\n" \
            "\bEnter a selection (default=1): "
        read themeIndex

        themeIndex=${themeIndex:-1}
        [ $themeIndex -lt 1 ] || [ $themeIndex -gt 2 ] && {
            echo "Invalid selection: Aborting."; 
            exit 1;
        }
        ((themeIndex--))

        # Update the file theme selected
        themeFile="${themeFiles[$themeIndex]}"
    fi
    mkdir -p "$(dirname $themeFile)"
    touch "$themeFile"

    # Write the theme in the Xresources file
    if [ "$(grep $xresParam: $themeFile)" = "" ]
    then
        # If it didn't exist, just add it to the file
        echo "${xresParam}: $newTheme" >> "$themeFile"
    else
        # Otherwise modify it with sed
        sed -i -E "s/${xresParam}:[[:space:]]+.*$/${xresParam}: ${newTheme}/" \
                  "$themeFile"
    fi
    
    # Reload Xresources with xrdb
    xrdb -load "$themeFile"

    # Set the global theme for other applications (e.g. display manager)
    local tmpFile="$(mktemp)"
    cat "${globalIcons}/default/index.theme" > "$tmpFile"
    sed -i -E "s/^Inherits=.*$/Inherits=${newTheme}/" "$tmpFile"
    cat "$tmpFile" > "${globalIcons}/default/index.theme"
    rm "$tmpFile"

    echo "Theme set to '$newTheme'"

    return 0
}

function list_themes() {
    get_themes
    for theme in "${themes[@]}"
    do
        echo -n "$theme"
        echo "$( [ $theme = $defaultTheme ] && echo ' (default)' )"
    done
}

# }}}


#··············································································
# Main {{{

if [ $# -eq 0 ]
then
    show_current
    exit 0
fi

if [ $# -gt 2 ]
then
    echo "$programName: too many arguments"
    echo "Try '$programName --help' for more information."
    exit 1
fi

case "$1" in
    "-h" | "--help")
        info_program
        exit 0
        ;;
    "-s" | "--set-theme")
        if [ $# -ne 2 ]
        then
            echo "$programName: no theme was passed"
            echo "Use '$programName --list-themes' to list available themes."
            exit 1
        elif ! check_arg $2
        then
            echo "$programName: unrecognized theme '$2'"
            echo "Use '$programName --list-themes' to list available themes."
            exit 1
        fi
        set_theme $2
        exit 0
        ;;
    "-l" | "--list-themes")
        list_themes
        exit 0
        ;;
    *)
        echo "$programName: unrecognized option '$1'"
        echo "Try '$programName --help' for more information."
        exit 1
        ;;
esac

# }}}
