#!/bin/bash
#
# Author: jseg380
# File: ~/.local/bin/percentage
#

#··············································································
# Variables {{{

programName="$(basename $0)"

number="$1"
values=($@)

# }}}


#··············································································
# Functions {{{

function info_program() {
cat << EOF
Usage: $programName NUMBER [OPTION] [VALUES]

Prints one of the given values depending of the number passed.
The values are assigned proportionally, e.g. if arguments are:
'30 one two three' then 'one' will be returned because it's in
the first range of [0, 33] [33, 66] [66, 100]

NUMBER is a positive integer in range [0, 100]

Options:
  -h, --help           display this help and exit
  -e, --examples       display some examples on how to use the program
  -r, --repeat         if present two other parameters are needed:
                         string to repeat
                         max
Values:
  value1 value2 ...  values are given as parameters
  file               values are written inside a file

File format: Values must be in the same line separated by spaces ' '
EOF
}

function show_examples() {
cat << EOF
Examples:

$programName 15 Q1 Q2 Q3 Q4
    -> Q1

$programName 34% Q1 Q2 Q3 Q4
    -> Q2

$programName 70 Q1 Q2 Q3
    -> Q3

echo -n "Q1 Q2 Q3" > file.txt
$programName 70 file.txt
    -> Q3

$programName 20 --repeat / 10
    -> //

$programName 20% --repeat A 5
    -> A

$programName 50% --repeat n/ 10
-> n/n/n/n/n/n/

EOF
}

function check_number() {
    echo "$number" | grep -qP '^[0-9]+%?$' && number="${number//%/}" && return 0
    return 1
}

function divide() {
    local n1=$(printf "%.0f" "$1")
    local n2=$(printf "%.0f" "$2")
    local result=$(( $n1 / $n2 ))

    if [ $# -eq 2 ]
    then
        local quotient=$(( 10**2 * $n1 / $n2 ))
        local integerPart=$(( quotient / 100 ))
        local decimalPart=$(( quotient % 100 ))
        result=$(printf "%d.%02d\n" $integerPart $decimalPart)
    fi

    echo "$result"

    return 0
}

function normal_mode() {
    [ $number -ge 100 ] && echo -n "${values[-1]}" && return 0

    local intervalSize=$(divide 100 ${#values[@]})
    local interval=$(divide $number $intervalSize -i)
    echo -n "${values[$interval]}"

    return 0
}

function repeat_mode() {
    local repString=$1
    local max=$2

    local times=$(python3 -c "print(f'{min(int($number / 100 * $max)+1, $max)}')")

    for ((i = 0; i < $times; i++))
    do
        echo -n "$repString"
    done

    return 0
}

# }}}


#··············································································
# Main {{{


case "$1" in
    "-h" | "--help")
        info_program
        exit 0
        ;;
    "-e" | "--examples")
        show_examples
        exit 0
        ;;
esac


if [ $# -lt 2 ]
then
    echo "$programName: too few arguments"
    echo "Try '$programName --help' for more information."
    exit 1
fi


if ! check_number
then
    echo "$programName: expected a number but received '$number'"
    echo "Try '$programName --help' for more information."
    exit 1
elif [ $number -gt 100 ]
then
    echo "$programName: the number must be an integer in [0, 100]"
    echo "Try '$programName --help' for more information."
    exit 1
fi

# If number is 0 then print the empty string ""
[ $number -eq 0 ] && echo -n "" && exit 0

# Repeat must be the 2nd option passed for backward compatibility
if [ $# -eq 4 ] && ([ "$2" = "-r" ] || [ "$2" = "--repeat" ])
then
    repeat_mode $3 $4
    exit 0
fi

case "$1" in
    "-"*)
        echo "$programName: unrecognized option '$1'"
        echo "Try '$programName --help' for more information."
        exit 1
        ;;
    *)
        values=("${values[@]:1}")
        if [ $# -eq 2 ] && read -r -a values < "$2" 2> /dev/null
        then
            echo "$programName: error while reading file '$2'"
            echo "Try '$programName --help' for more information."
            exit 1
        fi

        normal_mode
        exit 0
        ;;
esac

# }}}
