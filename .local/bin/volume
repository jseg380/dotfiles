#!/bin/bash
#
# Author: jseg380
# File: ~/.local/bin/volume
#

#··············································································
# Variables {{{

programName="$(basename $0)"

number=0
operator=""
timeout=3000

xdgData="${XDG_DATA_HOME:-$HOME/.local/share}"
iconNormal="${xdgData}/icons/volume/vol.svg"
iconMute="${xdgData}/icons/volume/vol_mute.svg"

xdgState="${XDG_STATE_HOME:-$HOME/.local/state}"
volFIFO="${xdgState}/.vol.fifo"

# }}}


#··············································································
# Functions {{{

function info_program() {
cat << EOF
Usage: $programName [OPTION] [NUMBER]

Show or adjust volume.

Options:
  -h, --help            display this help and exit
  -f, --full            shows volume with a corresponding icon and sends
                        a notification
  -n, --notification    sends a notification showing the volume
  -s, --simple          shows volume as an integer in range [0, 100]
  -t, --toggle-mute     toggle mute of the device and sends a notification

Valid number format:
      n       sets volume to n%
  +n, n+      increases volume to (current + n)%
  -n, n-      decreases volume to (current - n)%

'n' must be an integer in range [0, 100].
'n' can be followed by '%' if desired.

When no arguments are passed volume with the corresponding icon is shown.
EOF
}

function get_volume_simple() {
    echo -n $(pamixer --get-volume)
}

function get_operator() {
    local array=($@)
    for i in "${array[@]}"
    do
        [ "$i" != "" ] && echo -n "$i" && return 0
    done

    echo -n "?"
}

function check_arg() {
    local matches=()
    for i in {0..4}
    do
        matches+=("$(echo "$1" | 
            sed -n "s/^\([-+]\)\?\([0-9]\+\)\(%\)\?\([-+]\)\?\$/\\${i}/p")")
    done

    [ "${matches[0]}" = "" ] && return 1
    [ "${matches[1]}" != "" ] && [ "${matches[4]}" != "" ] && return 1
    [ ${matches[2]} -gt 100 ] && return 1

    operator=$(get_operator "${matches[1]}" "${matches[4]}")
    number=${matches[2]}

    return 0
}

function set_volume() {
    case $operator in
        "+")
            pamixer --increase $number > /dev/null 2>&1
            ;;
        "-")
            pamixer --decrease $number > /dev/null 2>&1
            ;;
        "?")
            pamixer --set-volume $number > /dev/null 2>&1
            ;;
        *)
            echo "$programName: invalid argument '$1'"
            echo "Try '$programName --help' for more information."
            exit 1
            ;;
    esac
}

function toggle_mute() {
    pamixer --toggle-mute
}

function is_muted() {
    [ "$(pamixer --get-mute)" = "true" ] && return 0
    return 1
}

function get_volume() {
    local vol=$(get_volume_simple)
    local icon="󰝟"

    is_muted || icon="$(percentage $vol 󰕿 󰖀 󰕾)"

    echo "$icon $vol%"
}

function send_notification() {
    local vol=$(get_volume_simple)
    local icon="$iconNormal"

    is_muted && icon="$iconMute"

    if [ -p "$volFIFO" ]
    then
        # Read the last ID if there is one relevant
        lastID=$(timeout 0.01s sh -c "cat < \"$volFIFO\"")
        lastID=${lastID:-1}

        # Send notification and store the id
        id=$(notify-send \
             --expire-time=$timeout --replace-id="$lastID" \
             --icon="$icon" --transient --print-id \
             "Volume - $vol%" "$(percentage $vol --repeat 󰹞 30)")
        # 30 is the width of the notification in chars: "󰹞"

        timeout 2s sh -c "echo \"$id\" > \"$volFIFO\"" &
    fi

    # In case the fifo is not created or there is a file with that name
    [ -e "$volFIFO" ] && [ -p "$volFIFO" ] || rm -f "$volFIFO"
    [ -p "$volFIFO" ] || mkfifo "$volFIFO"
}

# }}}


#··············································································
# Main {{{

if [ $# -eq 0 ]
then
    get_volume
    exit 0
fi

if [ $# -ne 1 ]
then
    echo "$programName: too many arguments"
    echo "Try '$programName --help' for more information."
    exit 1
fi

case "$1" in
    "-h" | "--help")
        info_program
        exit 0
        ;;
    "-f" | "--full")
        get_volume
        send_notification
        exit 0
        ;;
    "-n" | "--notification")
        send_notification
        exit 0
        ;;
    "-s" | "--simple")
        get_volume_simple
        exit 0
        ;;
    "-t" | "--toggle-mute")
        toggle_mute
        send_notification
        exit 0
        ;;
    "--"*)
        echo "$programName: unrecognized option '$1'"
        echo "Try '$programName --help' for more information."
        exit 1
        ;;
    *)
        if ! check_arg $1
        then
            echo "$programName: invalid argument '$1'"
            echo "Try '$programName --help' for more information."
            exit 1
        else
            set_volume $1
            send_notification
            exit 0
        fi
        ;;
esac

# }}}
